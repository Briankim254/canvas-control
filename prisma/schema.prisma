generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  verification  verification @default(UNVERIFIED)
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role         @default(DEFAULT)
  bio           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum verification {
  UNVERIFIED
  VERIFIED
}

enum Role {
  SUPER_ADMIN
  STORE_MANAGER
  CUSTOMER_SERVICE
  CUSTOMER
  DEFAULT
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Artist {
  id       String    @id @default(cuid())
  name     String
  bio      String?
  email    String
  image    String?
  phone    String?
  country  String?
  city     String?
  state    String?
  address  String?
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("artists")
}

model Product {
  id            String         @id @default(cuid())
  name          String
  price         Float
  status        String
  description   String
  image         String
  artistId      String
  artist        Artist         @relation(fields: [artistId], references: [id], onDelete: Cascade)
  orderProducts OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Order {
  id            String         @id @default(cuid())
  status        String
  subtotal      Float
  shipping      Float
  tax           Float
  total         Float
  customerId    String
  customer      Customer       @relation(fields: [customerId], references: [id])
  orderProducts OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderProduct {
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId])
  @@map("order_products")
}

model Customer {
  id      String  @id @default(cuid())
  name    String
  email   String?  @unique
  phone   String?
  address String?
  city    String?
  orders  Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}
